import QtQuick 2.0import "../JsEngine/Tools.js" as ToolsRectangle{	id: nodeText	width : 80	height : 16	//border.color : "white"	border.width : 0	property string type:"lit"		property alias domain : autocomplete.domain	property alias availableStrings : autocomplete.availableStrings	property alias text : textInput.text	property alias readOnly: textInput.readOnly	signal selected(variant zone);	signal escaped();		function select()	{		nodeText.focus = true;		selected(nodeText);	}		function selectWithText()	{		selected(nodeText);		textInput.focus = true;		textInput.initialText = textInput.text;		textInput.selectAll();		}		function set(value)	{		if (Tools.isString(value) || Tools.isNumber(value))		{			text = value;		}		else if(value instanceof Array)		{			text = value.join(".");			 		}	}		function modelChanged(path, func, value)	{		set(value);	}		signal changeModel(variant path, string func, variant param);		function textHasChanged()	{		changeModel([], "set", text);			}		Keys.onUpPressed :	{		if(textInput.focus)		{			autocomplete.up();		}	}		Keys.onDownPressed :	{		if(textInput.focus)		{			autocomplete.down();		}	} 		Keys.onEscapePressed :	{		if(textInput.focus)		{			textInput.text = textInput.initialText;			nodeText.focus = true;		}	}		Keys.onPressed:	{		if(event.key == Qt.Key_F2)		{			selectWithText();		}	}		TextInput 	{		property string initialText : ""		id : textInput		anchors.fill: parent		//anchors.topMargin : 2		anchors.leftMargin : 2		text : "property"		selectByMouse : true		renderType: Text.NativeRendering				onAccepted :		{			if(autocomplete.model && autocomplete.model.length > 0)			{				text = autocomplete.model[autocomplete.currentIndex];			}			nodeText.focus = true;			nodeText.textHasChanged();		}				// onFocusChanged:{if(!focus) console.log("focus changed")}		onTextChanged :		{			autocomplete.textChange();		}				MouseArea 		{			id : mouseArea			anchors.fill: parent			enabled : true			drag.target : nodeText.parent.parent			//hoverEnabled : true						onPressed:			{				// console.log("MouseArea pressed");				selected(nodeText);				mouse.accepted = false;			}		}	}		AutocompleteLineEdit	{		id : autocomplete		visible : textInput.activeFocus		textEdit : textInput	}}