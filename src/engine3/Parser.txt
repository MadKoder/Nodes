{
	function makeCallExpression(func, args) {
		return {
            type : "CallExpression",
            func : {
                type : "Id",
                name : func
            },
            args : args
        };
	}

    function makeInfixExpression(head, tail) {
        var result = makeCallExpression(tail[0].operator, [head, tail[0].operand]);
        for (var i = 1; i < tail.length; i++) {
            result = makeCallExpression(tail[i].operator, [result, tail[i].operand]);            
        };
        return result;
    }
}


start "start" = 
  "functions " _ func:FunctionDeclaration {return func;}
/ "actions " _ slot:Slot
	{
		return slot
	}
/ "nodes " _ node:Node {return node;}
/ "events " _ event:Event {return event;}
/ "structs " _ struct:Struct
	{
		return struct;
	}
	
Slot =
	id:Id _ params:("(" _ params:ParamsDecl? _")" {return params})? _ statements:Statements _
	{
		return {
			type : "Slot",
			id : id,
			params : params != null ? params : [],
			statements : statements
		};
	}

Node =
	"def" _ maybeTypeAndId:MaybeTypeAndId _ "=" _ val:Expression _
	{
		return {
			type : "def",
			id : maybeTypeAndId.id,
			val : val,
			explicitType : maybeTypeAndId.type
		};
	}
	/ "var" _ maybeTypeAndId:MaybeTypeAndId _  val:("=" _ val:Expression {return val;})? _
	{
		return {
			type : "var",
			id : maybeTypeAndId.id,
			val : val,
			explicitType : maybeTypeAndId.type
		};
	}

MaybeTypeAndId =
	type:Type _ id:Id
	{
		return {
			id : id,
			type : type
		}
	}
	/ id:Id
	{
		return {
			 id:id,
			 type:null
		};
	}

Type = 
	GenericInstance
	/ Id

TypeArgs =
	"<" _ types:Ids _ ">"
	{
		return types;
	}

ConditionalExpression = 
	_ "if" _ test:Comprehension _ "then" _ consequent:Comprehension _ "else " _ alternate:Comprehension
	{
        return{
	        type : "ConditionalExpression",
	        test: test,
	        consequent : consequent,
	        alternate : alternate
	    };
	}
	/ Comprehension

Comprehension = 
	"[" _ val:LogicalORExpression _ "for " _ it:CompIterators _ when:("when " _ test:Val {return test})? _ "]" 
	{
		var res = {
			"comp" : val,
			"it" : it
		};
		if(when != null)
		{
			res["when"] = when;
		}
		return res;

	}
	/ LogicalORExpression

CompIterators = 
	head:CompIterator _ tail:( _ "," _ (i:CompIterator) {return i})* 
	{
		return [head].concat(tail);
	}
	
CompIterator = 
	it:IdOrDestructId _ index:("," _ i:Id {return i;})? _ "in " _ array:Val
	{
		var res = {
			"for" : it,
			"in" : array,
		}
		if(index != null)
		{
			res["index"] = index;
		}
		return res;
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Expressions /////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

Expression =
    AdditiveExpression

AdditiveExpression =
    head:MultiplicativeExpression _ tail:(operator:AdditiveOperator _ operand:MultiplicativeExpression _ {
        return {
            operator: operator,
            operand: operand
        };
    })+ {
        return makeInfixExpression(head, tail);
    }
    / MultiplicativeExpression

AdditiveOperator =
    "+" !("=") { return "+"; }
    / "-" !("=") { return "-"; }

MultiplicativeExpression = 
    head:LogicalORExpression _ tail:(operator:MultiplicativeOperator _ operand:LogicalORExpression _ {
        return {
            operator: operator,
            operand: operand
        };
    } )+ {
        return makeInfixExpression(head, tail);
    }
	/ LogicalORExpression

MultiplicativeOperator =
    operator:("*" / "/" / "%") !"=" { return operator; }

LogicalORExpression =
	head:LogicalANDExpression _ tail:(operator:LogicalOROperator _ operand:LogicalANDExpression _ {
        return {
            operator: operator,
            operand: operand
        };
    })+ {
        return makeInfixExpression(head, tail);
    }
	/ LogicalANDExpression

LogicalOROperator
  = "or" { return "or"; }

LogicalANDExpression =
	head:BitwiseORExpression _ tail:(operator:LogicalANDOperator _ operand:BitwiseORExpression _ {
        return {
            operator: operator,
            operand: operand
        };
    })+ {
        return makeInfixExpression(head, tail);
    }
	/ BitwiseORExpression

LogicalANDOperator
  = "and" { return "and"; }

BitwiseORExpression =
	head:BitwiseXORExpression _ tail:(operator:BitwiseOROperator _ operand:BitwiseXORExpression _ {
        return {
            operator: operator,
            operand: operand
        };
    })+ {
        return makeInfixExpression(head, tail);
    }
	/ BitwiseXORExpression

BitwiseOROperator
  = "|" !("|" / "=") { return "|"; }

BitwiseXORExpression =
	head:BitwiseANDExpression _ tail:(operator:BitwiseXOROperator _ operand:BitwiseANDExpression _ {
        return {
            operator: operator,
            operand: operand
        };
    })+ {
        return makeInfixExpression(head, tail);
    }
	/ BitwiseANDExpression

BitwiseXOROperator
  = "^" !("^" / "=") { return "^"; }

BitwiseANDExpression =
	head:EqualityExpression _ tail:(operator:BitwiseANDOperator _ operand:EqualityExpression _ {
        return {
            operator: operator,
            operand: operand
        };
    })+ {
        return makeInfixExpression(head, tail);
    }
	/ EqualityExpression

BitwiseANDOperator
  = "&" !("&" / "=") { return "&"; }

EqualityExpression =
	head:RelationalExpression _ tail:(operator:EqualityOperator _ operand:RelationalExpression _ {
        return {
            operator: operator,
            operand: operand
        };
    })+ {
        return makeInfixExpression(head, tail);
    }
	/ RelationalExpression

EqualityOperator =
	"=="
 	/ "!="

RelationalExpression =
	head:ShiftExpression _ tail:(operator:RelationalOperator _ operand:ShiftExpression _ {
        return {
            operator: operator,
            operand: operand
        };
    })+ {
        return makeInfixExpression(head, tail);
    }
	/ ShiftExpression

RelationalOperator
  = "<="
  / ">="
  / "<"
  / ">"

ShiftExpression =
	head:UnaryExpression _ tail:(operator:ShiftOperator _ operand:UnaryExpression _ {
        return {
            operator: operator,
            operand: operand
        };
    })+ {
        return makeInfixExpression(head, tail);
    }
	/ UnaryExpression	

ShiftOperator
  = "<<"
  / ">>"

UnaryExpression
  = operator:UnaryOperator __ expression:UnaryExpression {
      return makeCallExpression((operator == "-") ? "opposite" : operator, [expression]);
    }
    / ChainedExpression

UnaryOperator
	= "-"
	/  "not"

ChainedExpression =
    head:Atom _ operations:(ChainedOperation)+ {
        var result = operations[0];
        result[
            (result.type === "MemberExpression") ? 
                "obj" :
                "func"
        ] = head;
        for (var i = 1; i < operations.length; i++) {
            var operation = operations[i];
            operation[
                (operation.type === "MemberExpression") ? 
                    "obj" :
                    "func"
            ] = result;
            result = operation;
        }
        return result 
    }
    / Atom

ChainedOperation =
    CallExpression
    / MemberExpression

MemberExpression =
    "." _ field:Id _ {
        return {
            type: "MemberExpression",
            /*obj: obj,*/
            field: field
        };
    }

CallExpression "CallExpression" = 
    "(" _ args:ExpressionList _ ")" _
    {   
        return {
            type : "CallExpression",
            /*func : func,*/
            args : args
        };
    }

ExpressionList = 
    headExpr:Expression tailExpr:( _ "," _ (i:Expression) {return i})*
    {
        return [headExpr].concat(tailExpr);
    }

Atom =
	Literal
	/ GenericInstance
	/ Id
	/ "(" _ expr:Expression _ ")" _ {return expr;}

GenericInstance = 
	base:Id _ "<" _ args:ExpressionList _ ">" _
	{
		return {
			type : "GenericInstance",
			base : base.name,
			args : args
		}
	}

Literal =
	BooleanLiteral
	/ StringLiteral
	/ Number

/*  / value:NumericLiteral {
      return {
        type:  "NumericLiteral",
        value: value
      };
    }
  / value:StringLiteral {
      return {
        type:  "StringLiteral",
        value: value
      };
    }
  / RegularExpressionLiteral*/

BooleanLiteral =
	"true" !IdentifierPart {
		return {
			type : "BooleanLiteral",
			val : true
		}
	}
	/ "false" !IdentifierPart {
		return {
			type : "BooleanLiteral",
			val : false
		}
	}

StringLiteral = 
	"\"" text:([^"\\] / dq:('\\' c:. {return c;}))* "\"" {
		return {
			type : "StringLiteral",
			val : text.join("")
		};
	}

Ids = 
	head:Id _ tail:( _ "," _ (i:Id) {return i})* 
	{
		return [head].concat(tail);
	}

Id = 
	name:([a-zA-Z_][a-zA-Z0-9_]*) { 
		return {
			type : "Id",
			name : name.length == 1 ?
				name[0] :
				name[0] + name[1].join("")
		};
	}

IdentifierStart
  = [a-zA-Z_]
  / "$"
  / "_"
  / "\\" sequence:UnicodeEscapeSequence { return sequence; }

IdentifierPart
  = IdentifierStart
  / "\u200C" { return "\u200C"; } // zero-width non-joiner
  / "\u200D" { return "\u200D"; } // zero-width joiner

UnicodeEscapeSequence
  = "u" digits:$(HexDigit HexDigit HexDigit HexDigit) {
      return String.fromCharCode(parseInt("0x" + digits));
    }

/*********************************************************************************************/
/*********************************************************************************************/
// End expressions ////////////////////////////////////////////////////////////////////////////
/*********************************************************************************************/
/*********************************************************************************************/

Expression2 = 
	Number
	/ Id
	/ LogicalORExpression
	/ CallExpression
	/ ConditionalExpression 
	// / Let
	// / Merge 
	// / Match 
	// / MatchType 
	// / "true" {return true;}
	// / "false" {return false;}
	// / "[]" { return {array : []};}
	// / Closure
	// / Range
	// / Comprehension
	// / Array 
	// / Dict
	// / ArrayDictAccess
	// / Var
	// / Message 
	// / "(" __ expression:Expression __ ")" { return expression; }
	// / array:( "[" __ (item:(Expression __ "," __) {return item[0];})* Expression __"]" ) { return [array[2].concat(array[3])]; }
	// / String

Connections = 
   head:Connection _ tail:(_ "," _ (c:Connection) {return c})* 
   {
      return [head].concat(tail);
   }
   
Connection =
	// Check if Var is OK for all, else we need to make a special case for functions
	_ signal:Var _ "=>" _ action:Statement  _ 
	{
		var ret = {
			action : action
		};
		if(signal)
		{
			ret.signal = signal;
		}
		return ret;
	}
	
Event =
	cond:Val _ action:Statement
	{
		return {
			"when" : cond,
			"do" : action
		};
	}

Slots = IdList 

IdList = 
   head:Id _ tail:(_ "," _ (slot:Id) {return slot})* 
   {
      return [head].concat(tail);
   }

ParamsDecl =
	head:ParamDecl tail:( _ "," _ (p:ParamDecl) {return p})* {return [head].concat(tail);}
	
ParamDecl = 
	type:Type _ id:Id 
	{
		return {
			type : type,
			id : id
		};
	}

Assignment = 
	local:("var")? _ target:Id _ "=" _ value:Val 
    {
		return {
			type : "Assignment",
            target : target,
            value : value,
            local : local != null
        };
	}

AccessAssignment = 
	_ slot:Var _ "[" _ indexOrKey:Val _ "]" _ "=" _ val:Val 
    {
		var affect = 
		{
            "accessSet": val,
            "slots": [slot],
            indexOrKey : indexOrKey
        };
		return affect;
	}

VarOrDestructVar = 
	Var
	/ DestructVar
	
DestructVar = 
	"(" _ vars:Vars _ ")"
	{
		return {
			destruct : vars
		};
	}
	
Vars =  
	head:Var tail:( _ "," _ (struct:Var) {return struct})* 
	{
		return [head].concat(tail);
	}
	
FunctionDeclaration =
	typeAndId:MaybeTypeAndId _ typeParams:("<" _ t:IdList _ ">" _ {return t;})? _
	"(" params:ParamsDecl ")" _ body:( "=" _ e:Expression {return e;})?
	{
		return {
			type : "FunctionDeclaration",
			id : typeAndId.id, 
			params : params, 
			body : body,
			typeParams : typeParams,
			explicitType : typeAndId.type
		};
	}

MaybeTypeAndIds =
	head:MaybeTypeAndId tail:( _ "," _ (type:MaybeTypeAndId) {return type})* 
	{
		return [head].concat(tail);
	}
	
Structs =  
	head:Struct tail:( _ "," _ (struct:Struct) {return struct})* 
	{
		return [head].concat(tail);
	}
	
Struct = 
	_ id:Id _ typeParams:("<" _ t:IdList _ ">" {return t;})? _ fieldsAndSubs:("(" _ fieldsAndSubs:FieldsAndSubs _ ")" {return fieldsAndSubs;})? {
		return {
			id : id,
			fields : fieldsAndSubs != null ? fieldsAndSubs.fields : [],
			subs : fieldsAndSubs != null ? fieldsAndSubs.subs : [],
			typeParams : typeParams != null ? typeParams : []
		};
	}
	
FieldsAndSubs = 
	fields:FieldsDef _ subs:("," _ "subs" _ "(" _ structs:Structs _ ")" {return structs;})?
	{
		return {
			fields : fields,
			subs : subs != null ? subs : []
		};
	}
	/ _ "subs" _ "(" _ structs:Structs _ ")"
	{
		return {
			fields : [],
			subs : structs
		};
	}

FieldsDef =  
	head:FieldDef tail:( _ "," _ field:FieldDef {return field})* 
	{
		// le [].concat.apply(head, tail) effectue un flatten sur tail
		// car le deuxieme param de apply est la liste des arguments
		//return [].concat.apply(head, tail);
		return [head].concat(tail);

	}

FieldDef = 
	"slot " slot:Slot {
		return slot
	}
	/ SignalDef
	/ !"subs" _ type:Type _ id:Id _  {
		return {
			type : "Var",			
			id : id,
			varType : type
		};
	}
	
SignalDef = 
	_ "signal" _ id:Id _ params:("(" params:ParamsDecl? ")" {return params;})? _
	{
		return {
			signal : id,
			params : (params != null) ? params : []
		};
	}

Closure = 
	params:MaybeTypeAndIds _ "->" _ val:Val
	{
		return{
			"closure" : val,
			"params" : params
		};
	}
	
Dict = 
	"{" _ head:DictEntry? tail:( _ "," _ (i:DictEntry) {return i})* _ "}"
	{
		var val = {};
		if(head)
		{
			val[head[0]] = head[1];
			for(var i = 0; i < tail.length; i++)
			{
				val[tail[i][0]] = tail[i][1];
			}
		}
		
		return {
			dict : val
		};
	}

DictEntry = 
	id:Id _ ":" _ val:Val
	{
		return [id, val]
	}

Array = 
	"[" _ head:Val tail:( _ "," _ (i:Val) {return i})* _ "]"
	{
		return {
			array : [head].concat(tail)
		};
	}

Range = 
	"[" start:Int".." stop:Int"]" {
		return {
			"type" : "range",
			"params" : [start, stop]
		};
	}

IdOrDestructId = 
	Id
	/ DestructId
	
DestructId = 
	"(" _ ids:Ids _ ")"
	{
		return {
			destruct : ids
		};
	}
	
Statements "Statements" = 
	"(" _ head:Statement tail:( _ "," _ (i:Statement) {return i})* ")" _ {
		return [head].concat(tail);
	}

Statement "Statement" = 
  Assignment 
  / AccessAssignment
  / Foreach
  / ForStatement
  / MatchStatement
  / MatchTypeStatement
  / ChainedSlotCall
  / Update
  /  _ "(" _ actions:Statements _ ")" _ 
  	{return  {
			slots : actions
		};}
  / IfStatement 
  / "while" _ param:Expression  _ "do" _ action:Statement _ 
	{
		return {
			while:param, 
			do:action};
	} 

ForStatement =
	_ "for" _ it:IdOrDestructId _ index:("," _ i:Id {return i;})? _ "in" _ 
	array:Val _ "do" _ action:Statement
	{
		var res =  {
			"for" : it,
			"in" : array,
			"do" : action
		};
		if(index != null)
		{
			res["index"] = index;
		};
		return res;
	}
	
MatchStatement =
	"match" _ what:Val _ "do" _ "("_ cases:StatementCases elseCase:ElseStatementCase? _")"
	{
		var ret = {
			match : what,
			cases : cases
		};
		if(elseCase)
		{
			ret.else = elseCase;
		}
		return ret;
	}

StatementCases =
	head:StatementCase _ tail:( _ "," _ (i:StatementCase) {return i})* 
	{
		return [head].concat(tail);
	}

StatementCase =
	vals:Vals _ "=>" _ action:Statement
	{
		return {
			vals : vals, 
			action : action
		};
	}

ElseStatementCase =
	(",")? _ "_" _ "=>" _ action:Statement
	{
		return action;
	}

MatchTypeStatement = 
	"type" _ id:Var _ "do" _ "(" _ matchCases:TypeStatementCases _ ")" 
	{
		return {
			matchType : id,
			cases : matchCases
		};
	}
		
TypeStatementCases = 
	head:TypeStatementCase _ tail:( _ "," _ (i:TypeStatementCase) {return i})* 
	{
		return [head].concat(tail);
	}
	
TypeStatementCase = 
	type:Id _ "=>" _ action:Statement
	{
		return {
			type : type,
			action : action
		}
	}

Update =
	"update" _ it:IdOrDestructId _ index:("," _ i:Id {return i;})? _ "in" _ array:Val _
	"with" _ val:ValOrCondUpdate _ filter:("filter " _ test:Val {return test})?
	{
		var res = {
			"update" : it,
			"in" : array			
		}
		if("cond" in val)
		{
			res["condWith"] = val.cond;
		}
		else
		{
			res["with"] = val.val;
		}
		if(index != null)
		{
			res["index"] = index;
		}
		if(filter != null)
		{
			res["filter"] = filter;
		}
		return res;
	}

ValOrCondUpdate =
	cond:CondUpdate {return {cond : cond};}
	/ val:Val {return {val : val};}

CondUpdate =
	_ val:Val _ "if" _ cond:Val 
	{
		return {
			"val" : val,
			"if" : cond
		};
	}
	
Foreach =
	_ "foreach " _ id:Var _ signal:Id _ params:("(" _ params:ExpressionList? _ ")" {return params})?
	{
		return {
			foreach : id,
			signal : signal,
			params : params != null ? params : []
		};
	}
  
SlotCall = 
	id:Id _ path:StructPath _ "(" _ params:ExpressionList? _ ")" _ {
		var varPath = [id].concat(path.slice(0, path.length - 1));
		return {
			type : "Signal",
			slot : path.pop(),
			params : params != null ? params : [],
			var : varPath
		};
	}

ChainedSlotCall =
    head:Id _ operations:(ChainedReference)* _ "(" _ args:ExpressionList? _ ")" _ {
		var result = head;
        for (var i = 0; i < operations.length; i++) {
            var operation = operations[i];
            operation["obj"] = result;
            result = operation;
        }
        result = {
			type : "Signal",
			slot : result,
			args : args != null ? args : []
		};
        return result 
    }

ChainedReference =
	MemberReference

MemberReference =
    "." _ field:Id _ {
        return {
            type: "MemberReference",
            /*obj: obj,*/
            field: field
        };
    }

Var = 
	start:Id subPath:(SubPath)?{
		var finalPath = [start];
		if(subPath != null)
			finalPath = finalPath.concat(subPath);
		return finalPath;
	}
  
IfStatement =
	"if" _ param:Expression  _ "then" _ action:Statement _ elseStatement:("else" _ action:Statement {return action;})?
	{
		var graph =
		{
			if:param, 
			then:action
		};
		if(elseStatement != null)
		{
			graph["else"] = elseStatement;
		}
		return graph;
	}

FieldList
  = head:Field tail:( _ "," _ (f:Field) {return f})* 
    {
      var fields = {};
      fields[head[0]] = head[1];
      for(var i = 0; i < tail.length; i++) fields[tail[i][0]] = tail[i][1];
      return fields;
    }

Field =
	id:Id _ ":" _ val:Expression {
		return {
			id : id,
			val : val
		};
	}

Val = 
	!Connection exp:Expression {return exp;}
	/ !Connection exp:Expression {return exp;}

ExpressionList = 
	headExpr:Val tailExpr:( _ "," _ (i:Val) {return i})* {return [headExpr].concat(tailExpr);}

ArrayDictAccess =
	_ id:Var _ "[" _ indexOrKey:Val _ "]" _
    {
		return {
            access: id,
            indexOrKey : indexOrKey
        };
	}

Merge = 
	id:Var _ "\\" _ affectations:MergeAssignments
	{
		return {
			merge : id,
			with : affectations
		};
	}
		
MergeAssignments =
	head:MergeAssignment _ tail:( _ "\\" _ (i:MergeAssignment) {return i})* 
	{
		return [head].concat(tail);
	}
	
MergeAssignment = 
	"if " _ cond:Val _ "then " _ affectations:UncondAssignments _ elseAssignments:("else " _ affectation:UncondAssignments {return affectation})?
	{
		var aff = {
			"cond" : cond,
			"affectations" : affectations
		}
		
		if(elseAssignments != null)
		{
			aff["else"] = elseAssignments;
		}
		return aff;
	}
	/ UncondAssignment
	/ "(" _ aff:MergeAssignment _ ")" {return aff;}

UncondAssignments =
	head:UncondAssignment _ tail:( _ "," _ (i:UncondAssignment) {return i})* 
	{
		return [head].concat(tail);
	}
	
UncondAssignment =
	paths:MergePaths _ "=" _ val:Val
	{
		return {
			paths : paths,
			val : val
		};
	}
	
MergePaths = 
	head:Var _ tail:( _ "," _ (i:Var) {return i})* 
	{
		return [head].concat(tail);
	}

Match =
	"match" _ what:Val _ "("_ cases:Cases elseCase:ElseCase _")"
	{
		return {
			match : what,
			cases : cases,
			else : elseCase
		}
	}

Cases =
	head:Case _ tail:( _ "," _ (i:Case) {return i})* 
	{
		return [head].concat(tail);
	}

Case =
	vals:Vals _ ":" _ out:Val
	{
		return {
			vals : vals, 
			out : out
		};
	}
	
ElseCase =
	(",")? _ "_" _ ":" _ out:Val
	{
		return out;
	}
	
Vals =
	!("_"!Id) head:Val _ tail:( _ "," _ (i:Val) {return i})* 
	{
		return [head].concat(tail);
	}

MatchType = 
	"type" _ id:Id _ "(" _ matchCases:TypeCases _ ")" 
	{
		return {
			matchType : id,
			cases : matchCases
		};
	}
		
TypeCases = 
	head:TypeCase _ tail:( _ "," _ (i:TypeCase) {return i})* 
	{
		return [head].concat(tail);
	}
	
TypeCase = 
	type:Type _ ":" _ val:Val
	{
		return {
			type : type,
			val : val
		}
	}

Let = "let" _ what:OneOrMoreNode  _ "in" _ val:Val
{
	return {
		let : what,
		in : val
	}
} 

OneOrMoreNode =
	node:Node {return [node]}
	/ "(" _ nodes:Nodes _ ")" {return nodes;}

Nodes = 
	head:Node _ tail:( _ "," _ (i:Node) {return i})* 
	{
		return [head].concat(tail);
	}

Message = 
	"<-" _ id:Id _ params:("(" _ params:ExpressionList _ ")" {return params})?
	{
		return {
			msg : id,
			params : params != null ? params :  []
		};
	}
	
SubPath = 
	StructPath
	
StructPath =
	"." path:Id subPath:(SubPath)? {
		var finalPath = [path];
		if(subPath != null)
			finalPath = finalPath.concat(subPath);
		return finalPath;
	}


Number "Number" =
	literal:(HexIntegerLiteral / DecimalLiteral / Int) {
      return literal;
    }

DecimalLiteral = 
	parts:(SignedInteger"." DecimalDigits? ExponentPart?) {
		return {
			type : "FloatLiteral",
			val : parseFloat(parts.join(""))
		};
	}
	/ parts:("." DecimalDigits ExponentPart?) {
		return {
			type : "FloatLiteral",
			val : parseFloat(parts.join(""))
		};
	}
	/ parts:(SignedInteger ExponentPart) {
		return {
			type : "FloatLiteral",
			val : parseFloat(parts.join(""))
		}
	}

Int = 
	int:DecimalIntegerLiteral 
	{
		return {
			type : "IntLiteral",
			val : parseInt(int)
		}
	}

DecimalIntegerLiteral
  = "0" / parts:(NonZeroDigit DecimalDigits?) {return parts.join("");}

DecimalDigits
  = d:DecimalDigit+ {return d.join("");}

DecimalDigit
  = [0-9]

NonZeroDigit
  = [1-9]

ExponentPart =
	ExponentIndicator exp:SignedInteger
	{
		return "e" + exp;
	}

ExponentIndicator
  = [eE]

SignedInteger
  = parts:([-+]? DecimalDigits) {return parts.join("");}

HexIntegerLiteral
  = "0" [xX] digits:HexDigit+ { return parseInt("0x" + digits); }

HexDigit
  = [0-9a-fA-F]

_
  = (WhiteSpace)*

__
  = (WhiteSpace)*

WhiteSpace "whitespace"
  = [\t\v\f \u00A0\uFEFF]
  / Zs

// Separator, Space
Zs = [\u0020\u00A0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000]


LineTerminatorSequence "end of line"
  = "\n"
  / "\r\n"
  / "\r"
  / "\u2028" // line separator
  / "\u2029" // paragraph separator