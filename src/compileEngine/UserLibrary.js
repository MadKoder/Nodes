function write(str, val){	if(val != undefined)	{		console.log(str + " : " + val);	}	else	{		console.log(str);	}}function Cube(sources, fields){	this.fields = fields;	this.get = function (path)    {		console.log("get Cube "+ path);				if(path == undefined || path.length == 0)		{			return this.fields;		}		else		{			return this.fields[path[0]].get(path.slice(1));		}    }		this.signal = function(path, val)    {		if(path == undefined || path.length == 0)		{			this.fields = val;		}		else		{			this.fields[path[0]].signal(path.slice(1), val);		}    }}function Vec3(sources, fields){	this.fields = {		x : fields.x.get(),		y : fields.y.get(),		z : fields.z.get()	};		write("build Vec3!!!!!!!!!!!",fields)		this.get = function (path)    {		write("get", path);		if(path == undefined || path.length == 0)		{			return this.fields;		}		else		{			return this.fields[path[0]];		}    }		this.signal = function(path, val)    {		if(path == undefined || path.length == 0)		{			this.fields = val;		}		else		{			this.fields[path[0]] = val;		}    }	// this.getter = function(path)    // {		// return function(v)		// {			// return v[path[0]];		// }    // };		// var sinks = {};				// this.addSink = function(sourcePath, obj, sinkPath)	// {		// var key = sourcePath.join(" ");		// if(!(key in sinks))		// {			// sinks[key] = [];		// }		// sinks[key].push(		// {			// "obj" : obj,			// "path" : sinkPath		// });	// }	}function incLibrary(library){	library.classes["Cube"] =	{		"fields":		{			"position": "Vec3",			"rotation": "Vec3"		},		builder: Cube	};		library.classes["Vec3"] =	{		"fields":		{			"x": "Float",			"y": "Float",			"z": "Float"		},		builder: Vec3,		implConstructor: function(fields)		{			var x = fields.x;			var y = fields.y;			var z = fields.z;						return function()			{				write("make Vec3!!!!!!!!!");				return new Vec3(fields);			}		},		params : ["x", "y", "z"]	};		library.classes["Scene"] =	{		"in" : ["Objects"],		"builder" : function (sources) 		{			this.sources = sources;		}	};	library.classes["Renderer"] =	{		"in" : ["Scene", "Camera"],		"builder" : function (sources) 		{			this.sources = sources;		}	};		library.classes["Camera"] =	{		"in" : [],		"builder" : function () 		{}	};	return library}