
struct Obj:
	state : State
	pos : Matrix
	subs :
		Leaf :
			subs :
				Cube :
					size : Vec3
				Circle : 
					radius : float
		Group :
			children : list<Obj>
			
list<Leaf>	getLeaves(Obj obj):
	type obj:
		Group : flatten([getLeaves(child) for child in obj.children])
		Leaf : [obj]
		
Group root
leaves = [obj for obj in getLeaves(root) when obj is Leaf]

list<(Leaf, State)>	getLeavesAndState(Obj obj, State parentState):
	let
		accumState = accum(obj.state, parentState)
	in
		typeof obj:
			Group : flatten([getLeavesAndState(child, accumState) for child in obj.children])
			Leaf : [(obj, accumState)]
			
-> depends : 
	obj.state
	parentState
	
group
	cube
	
[
	(
		group.children[0] ::  
		[
			group.children, 
			group.children[0],
			group.children[0].state
		],
		accum(group.children[0].state, accum(group.state, parentState)) ::
		[
			parentState,
			group.state,
			group.children[0].state
		]
	)
]

list<(Leaf, list<int>)>	getLeavesAndPath(Obj obj, list<int> path):
	typeof obj:
		Group : flatten([getLeavesAndPath(child, path::i) for child, i in obj.children])
		Leaf : [(obj, path)]
			
[(cube, [0])]

list<Leaf>	getLeavesAndState(Obj root, State startState):
	select root :
		Leaf l, path : (l, reduce(mapField("state", path), accumState, startState))

Select =
	"select " _ id:Var _ ":" _"(" _ selectors:Selectors _ ")" _
	{
		return {
			select : id,
			selectors : selectors
		}
	}

Selectors = 
	head:Selector _ tail:(_ "," _ s:Selector {return s})* 
   {
      return [head].concat(tail);
   }
		
Selector =
	type:Id _ id:Id _ path:("," _ path:Id)? _ ":" _ val:Val 
	{
		var ret = {
			type : type,
			id : id,
			val : val
		};
		if(path)
		{
			ret.path = path;
		}
		return ret;
	}
	
Group root
State	initState
leavesAndStates = getLeavesAndState(root, initState)

Obj setAllCubesToRed(Obj obj):
	type obj:
		Cube : obj \ state.color = red
		Group : obj \ children = [setAllCubesToRed(child) for child in obj.children]
		_ : obj
		
setAllCubesToRed(ref Obj obj):
	type obj:
		Cube : obj.state.color = red
		Group : 
			on child in obj.children apply
				setAllCubesToRed(child)
		_ : _

setAllCubesToRed(ref Obj root):
	on select root apply:
		Cube : state.color = red
		
setAllObjToRed(ref Obj root):
	on select root apply:
		* : state.color = red

SelectAction =
	_ "select" it:Var _ "apply" _ action:Action
	{
		var res =  {
			"select" : it,
			"apply" : action
		};
		return res;
	}
	
SelectorActions = 
	head:Selector _ tail:(_ "," _ s:Selector {return s})* 
   {
      return [head].concat(tail);
   }
		
SelectorAction =
	type:Id _ id:Id _ path:("," _ path:Id)? _ ":" _ val:SelectorAffectations 
	{
		var ret = {
			type : type,
			id : id,
			affectations : val
		};
		if(path)
		{
			ret.path = path;
		}
		return ret;
	}
	
SelectorAffectations =
	head:MergeAffectation _ tail:( _ "," _ (i:MergeAffectation) {return i})* 
	{
		return [head].concat(tail);
	}
	
select root along path :
	accum stateSet using accumStateSet default defaulStateSet :
		Obj o : getStateSet(obj)
	match :
		Circle c : tuple(c, stateSet)
		
mapTree root with getStateSet

stateTree : mapTree(getStateSet, root)

accumStateTree : scanTree(accumStateOnObj, root, defaultRoot)

accumStateOnObj(accum, obj):
	obj \ stateSet = merge(accum.statSet, obj.statSet)
	
def circles : select accumStateTree:
	Circle c : c
	
list<Circle> getCircles(Obj obj):
	type obj :
		Circle c : [c]
		Group g : flatMap(getCircles, g.children)
		_ : []

list<Circle> getCirclesAccumState(Obj obj):
	cache :
		obj
	in 
		type obj :
			Circle c : [c]
			Group g : flatMap
				(
					child => getCirclesAccumState
					(
						child \ stateSet = merge(g.stateSet, child.stateSet)
					),
					g.children
				)
			_ : []


setRectToRed(ref Obj obj):
	typeApply obj :
		Rect : obj.stateSet = merge(obj.stateSet, {color : Color(1, 0, 0)}) 
		Group : on child in obj.children apply
			setRectToRed(child)
