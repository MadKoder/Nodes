structs:
	Vec2 :
		x, y : float
	Vec3 :
		x, y, z : float
	Color :
		r, g, b : float
	State : 
		color : Color
trees:
	Obj :
		stateSet : dict<string, State>
		groups:
			Group
		leaves:
			Rect : 
				pos, size : Vec2
			Circle :
				pos : Vec2
				radius : float
functions:
	accumState(dict<string, State> accum, dict<string, State> state):
		merge(accum, state)
	getStateSet(Obj obj):
		obj.stateSet
	list<T> getTypeAndAccumState<T>(Obj obj): type obj :
		T  : [obj]
		Group : flatMap
			(
				Obj child -> getTypeAndAccumState<T>(child \ stateSet = merge(obj.stateSet, child.stateSet)),
				obj.__children
			)
		_ : []
	list<Group> findGroups(Obj obj):  type obj :
		Group : pushFront(flatMap(findGroups, obj.__children), obj)
		_ : []
nodes:
	var defaultState : State(Color(0, 0, 0))
	var dict<string, State> defaultStateSet
	var root : Group
		(
			[
				Rect
				(
					{}, 
					Vec2(10, 10), Vec2(400, 100)
				),
				Circle
				(
					{}, 
					Vec2(100, 100), 50
				)
				,
				Group
				(
					[
						Circle
						(
							{}, 
							Vec2(10, 10), 10
						)
					],
					{}
				)
			], 
			{color : Color(0, 1, 0)}
		)
	# def leafStates	: select root along path :
		# Rect l : reduce(accumState, map(getState, path), defaultState)
	def leafStates	: select root along path :
		Rect : reduce(accumState, map(getStateSet, path), defaultStateSet)
	def rects : getTypeAndAccumState<Rect>(root)
	# def circles : select root along path :
		# Circle c : tuple(c, reduce(accumState, map(getStateSet, path), defaultStateSet))
	def circles : getTypeAndAccumState<Circle>(root)
actions :
	Obj.moveAll :
		type self apply:
			Rect : 
				self.pos.y = self.pos.y + 0.1
				self.size.x = self.size.x + 0.1
			Circle : 
				self.pos.x = self.pos.x + 0.1
			Group : 
				# for child in obj.__children do moveAll(child)
				foreach self.__children moveAll()
	tick : 
		# select root apply:
			# Rect r : 
				# pos.y = r.pos.y + 0.1
				# size.x = r.size.x + 0.1
			# Circle c : 
				# pos.x = c.pos.x + 0.1
		root.moveAll()
	# addRect(Obj obj) : 
		# type obj apply:
			# Group : 
				# obj.__children = pushFront(obj.__children, Rect({}, Vec2(50, 50), Vec2(40, 10)))
				# on child in obj.__children apply addRect(child)
	Obj.addRect(int i) : 
		type self apply:
			Group : 
				if length(findGroups(self)) ==  1 then self.__children = pushFront(self.__children, Rect({}, Vec2(50 * i, 50), Vec2(40, 10)))
				foreach self.__children addRect(i + 1)
				# for child, index in self.__children do child.addRect(index + 1)
	addRectToRoot:
		root.addRect()