structs:
	Vec2 :
		float x
		float y
	Vec3 :
		float x
		float y
		float z
	Color :
		float r
		float g
		float b
	State : 
		Color color
	Ui : 
		subs :
			Group:
				list<Ui> children
				subs :
					HGroup
					VGroup
			Button :
				string desc
				signal click(string what)
				slot onClick(string what):
					self.click(what)
			TextInput :
				string desc
				signal set(string text)
				slot onChange(string text):
					self.set(text)
	ParamDecl :
		string	name
		string	type
	Expr :
		subs :
			Func :
				string			type
				list<string>	params
	FuncDef :
		string	id
		list<ParamDecl>	inputs
		Expr	output
	Program :
		list<FuncDef>	functions
functions:
	addVec2(Vec2 v0, Vec2 v1)
		Vec2(v0.x + v1.x, v0.y + v1.y)
	subVec2(Vec2 v0, Vec2 v1)
		Vec2(v0.x - v1.x, v0.y - v1.y)
	ref Ui exprToUi(Expr expr)
		type expr :
			Func : TextInput(expr.type, set => expr.type = text)
			_ : TextInput("")
	ref Ui funcToUi(FuncDef func)
		HGroup
		(
			[
				VGroup
				(
					[
						HGroup
						(
							[
								TextInput(paramDecl.type, set => paramDecl.type = text),
								TextInput(paramDecl.name, set => paramDecl.name = text)
							]
						)
						for paramDecl in func.inputs
					]
				)
				,exprToUi(func.output)
			]
		)
	ref Ui progToUi(Program prog)
		VGroup
		(
			[funcToUi(func) for func in prog.functions]
		)
nodes:
	var a = 1
	var program = Program
		(
			[]
		)
	def uiView = UiView(progToUi(program))
	def uiView2 = UiView(progToUi(program))
actions :
	# tick :
	# 	program = program \ functions = pushFront(program.functions, FuncDef("fun2"))
