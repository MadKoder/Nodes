functions:
	intToFacing(int v) 
		match mod(v, 4):
			0 : "right" 
			1 : "up" 
			2 : "left" 
			_ : "down"
	facingToInt(string f) 
		match f:
			"right" : 0
			"up" : 1
			"left" : 2
			_ : 3
structs:
	Maybe<T> :
		subs :
			Just :
				T x
			None
	Vec2 :
		float x
		float y
		slot inc(Vec2 delta) : 
			self.x = self.x + delta.x
			self.y = self.y + delta.y
		subs : 
			Vec3:
				float z
	Rect :
		Vec2 pos
		Vec2 size
	Monster :
		Vec2 pos
		string facing
		int animState
		signal click(int val)
		slot changeDir(int dirDelta) : 
			self.facing = intToFacing(facingToInt(self.facing) + dirDelta)
	Obj :
		subs :
			Group :
				list<Obj>		children
			Leaf :
				int x
	Ui : 		
		subs :
			UiGroup:
				list<Ui> children
				signal add(Obj what)
			UiLeaf :
				int x
functions:
	ref intListToMonsterList(list<int> l, int x)
		[
			Monster
			(
				Vec2(i, i + x),
				"right",
				i * 10,
				click => 
					x = x + val
					i = i + val
			)
			for i in l
		]
	 # TODO template de value
	dictAccess<K>(dict<K, int> d, K a)
		let t = d[a]
		in type t :
			Just<int> : t.x
			_ : 0
	ref Ui objToUi(Obj obj)
	ref Ui groupToUi(Group g)
		UiGroup
		(
			[objToUi(child) for child in g.children],
			add => g.children = pushBack(g.children, what)
		)
	ref Ui objToUi(Obj obj)
		type obj:
			Group : groupToUi
				(
					obj					
				)
			Leaf : UiLeaf(obj.x)
	list<list<int>> incListOfList(list<list<int>> l)
		[[j + 1 for j in i] for i in l]
nodes:
	var intList = [1, 2, 3]
	var filteredList = [x for x in intList when x < 3]
	var x = 0
	def monsterListDef = intListToMonsterList(intList, x)
	var monsterListVar = intListToMonsterList(intList, x)
	def listAccess = at(monsterListDef, 1)
	var d = {a : 1, b : 2}
	var dAccessJust = dictAccess(d, "b")
	var dAccessNone = dictAccess(d, "c")
	var graph = Group
		([
			Group
			([
				Leaf(1), 
				Leaf(2)
			]),
			Leaf(3)
		])
	def ui = objToUi(graph)
	def ifExpr = if x == 6 then 10 else 0
	def mapLambda = map(int val -> val + 10, intList)
	var updatedAndMergedList = [Vec2(0., 1.), Vec2(2., 3.)]
	var forEachList = [Vec2(0., 1.), Vec2(2., 3.)]
	var ifAction = true
	var whileAction = 0
	var eventTest = 0
	var matchTest = match 0:
		0 : true
		1 : false
		_ : false
	var rangeTest = [0..2]
	var multiComprehension = [[x + i + j for x, j in a when (x == 2) || (x == 4)] for a, i in [[1, 2], [3, 4]]]
	var matchActionTest = 0
	var templateOfTemplateTest = incListOfList([[0, 1], [2, 3]])
	var	structAcessTest = Rect(Vec2(0, 1), Vec2(2, 3))
actions:
	tickUi(Ui ui):
		type ui do :
			UiGroup => 
				ui.add(Leaf(10))
				for child in ui.children do
					tickUi(child)
	tick:
		for monster in monsterListDef do
			monster.click(2)
		tickUi(ui)
		update vec, i in updatedAndMergedList
			with vec \ x = 20. + i if vec.x > 1.
		foreach forEachList inc(Vec2(1., 1.))
		if ifAction then ifAction = false
		while whileAction < 10 do 
			whileAction = whileAction + 1
		eventTest = 1
		match matchActionTest do :
			10 => matchActionTest = 0
			0 => matchActionTest = 10
			_ => matchActionTest = 0
		structAcessTest.size.x = structAcessTest.pos.y + 10
		structAcessTest.size.inc(Vec2(1, 1))
events:
	eventTest == 1 :
		eventTest = 2
		eventTest = eventTest + 1
