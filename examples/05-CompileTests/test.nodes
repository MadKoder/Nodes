# structs:
# 	Obj :
# 		subs:
# 			Group :
# 				list<Obj>	children
# 			Leaf:
# 				Vec2 pos
# functions:
# 	list<T> genericOutputFunc<T>(Obj obj) type obj :
# 		T  : [obj]
# 		Group : flatMap
# 			(
# 				Obj child -> getTypeAndAccumState<T>(child \ stateSet = merge(obj.stateSet, child.stateSet)),
# 				obj.children
# 			)
# 		_ : []
# functions:
# 	genericOutputFunc2<T>(T x):
# 		map<T, T>
# 			(
# 				T x -> x + 1,
# 				[x]
# 			)
# 	genericOutputFunc<T>(T x):
# 		genericOutputFunc2<T>(x)
nodes:
	var x = 1 + 2
	def y = x
