{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"sin",
				"sinks"
			],
			[
				"pa",
				"parentType"
			],
			[
				"nee",
				"needsNodes"
			],
			[
				"has",
				"hasConnections"
			],
			[
				"Arra",
				"Array"
			],
			[
				"ar",
				"arrayAccess"
			],
			[
				"typ",
				"typeParam"
			],
			[
				"cac",
				"cacheStack"
			],
			[
				"Arr",
				"ArrayAccess"
			],
			[
				"loca",
				"localNodes"
			],
			[
				"st",
				"stack"
			],
			[
				"ti",
				"ticks"
			],
			[
				"min",
				"minMax"
			],
			[
				"le",
				"length"
			],
			[
				"gloa",
				"globalTick"
			],
			[
				"is",
				"isNumber"
			],
			[
				"glo",
				"globalTick"
			],
			[
				"func",
				"function"
			],
			[
				"val",
				"valTicks"
			],
			[
				"las",
				"lastIndex"
			],
			[
				"up",
				"updateOperator"
			],
			[
				"fields",
				"fieldsOperators"
			],
			[
				"ma",
				"mainUiIndex"
			],
			[
				"str",
				"struct"
			],
			[
				"n",
				"nodes"
			],
			[
				"sup",
				"superConcreteName"
			],
			[
				"ty",
				"typeParams"
			],
			[
				"type",
				"typeParamsInstances"
			],
			[
				"lib",
				"library"
			],
			[
				"cla",
				"classGraph"
			],
			[
				"ba",
				"background-color"
			],
			[
				"bor",
				"border-left"
			],
			[
				"border",
				"border-style"
			],
			[
				"bord",
				"border-bottom"
			],
			[
				"bo",
				"border-width"
			],
			[
				"conn",
				"connectionSet"
			],
			[
				"__re",
				"__referencedNodes"
			],
			[
				"pro",
				"programToUi"
			],
			[
				"bef",
				"beforePromiseCounter"
			],
			[
				"prom",
				"promiseCounter"
			],
			[
				"get",
				"getRef"
			],
			[
				"sig",
				"signals"
			],
			[
				"sub",
				"subStores"
			],
			[
				"arr",
				"arrayIndex"
			],
			[
				"fie",
				"field"
			],
			[
				"pr",
				"promise"
			],
			[
				"con",
				"connection"
			],
			[
				"connn",
				"connections"
			],
			[
				"fun",
				"function"
			],
			[
				"para",
				"paramDecl"
			],
			[
				"param",
				"paramDecl"
			],
			[
				"fiel",
				"fieldDecl"
			],
			[
				"firs",
				"firstType"
			],
			[
				"most",
				"mostGenericType"
			],
			[
				"isS",
				"isSameOrSubType"
			],
			[
				"check",
				"checkedTypeParams"
			],
			[
				"ref",
				"refTypeParams"
			],
			[
				"ch",
				"checkedTypeParams"
			],
			[
				"getT",
				"getType"
			],
			[
				"inOu",
				"inOut1"
			],
			[
				"second",
				"secondType"
			],
			[
				"chec",
				"checkedBaseType"
			],
			[
				"paramSpe",
				"paramSpec"
			],
			[
				"id",
				"newId"
			],
			[
				"cons",
				"console"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/jsEngine/Engine.js",
			"settings":
			{
				"buffer_size": 96573,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/jsEngine/Library.js",
			"settings":
			{
				"buffer_size": 44272,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/jsEngine/Graph.js",
			"settings":
			{
				"buffer_size": 9889,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "$(document).ready(function ()\n{\n\n\nfunction mf1(func1, inAndOutTypes)\n{\n	return {\n		params : [[\"first\", inAndOutTypes.inputs[0]]],\n		func : function(params)	{	\n			return func1(params[0]);\n		},\n		type : inAndOutTypes.output\n	}\n}\n\nvar code;\nvar uiIndex = 0;\n\nfunction enclose(str, parentType)\n{\n	switch(parentType)\n	{\n		case \"VGroup\" :\n			return\"<div class=\\\"vGroupElem\\\" id=enclose\" + uiIndex.toString() + \">\" + str + \"</div>\";\n		case \"HGroup\" :\n			return \"<div class=\\\"hGroupElem\\\" id=enclose\" + uiIndex.toString() + \">\" + str + \"</div>\";\n		case \"\" :\n			return str;\n	}\n}\n\n\n\nvar $tmp = $(\"#tmp\");\n\nfunction buildUi(view, model, parentType, path, rootUi, ticks, maxTick)\n{\n	if(ticks.tick < maxTick)\n		return view;\n\n	var type = model.__type;\n	switch(type)\n	{\n		case \"TextInput\" :\n			var uiId = type + uiIndex.toString();\n			var buttonIndex = uiIndex;\n			$tmp.append(enclose(\"<input size=\\\"8\\\" type = \\\"text\\\" id=\" + uiId + \" value = \\\"\" + model.desc + \"\\\"></input>\", parentType));\n			var $ui = $(\"#\" + uiId);\n			var $enclose = $(\"#enclose\" + uiIndex.toString());\n			if(!(\"__focusSlotPushed\" in model.__signals))\n			{\n				model.__signals.__focusSlotPushed = true;\n				model.__signals.focus.push({\n					signal : function()\n					{\n						// $(\"#\" + uiId).focus();\n					}\n				});\n			}\n			$ui.change(function(event) \n			{\n				// rootUi.set(\"toto\");\n				rootUi.signal(\"onChange\",  [new Store($(this).val())], path);\n				// code.p.dirty([]);\n			});\n			uiIndex++;\n			return $enclose;\n			break;\n		case \"Text\" :\n			var uiId = type + uiIndex.toString();\n			$tmp.append(enclose(\"<div class=\\\"text\\\" id=\" + uiId  + \"\\\">\" + model.txt+ \"</div>\", parentType));			\n			var $ui = $(\"#\" + uiId);\n			var $enclose = $(\"#enclose\" + uiIndex.toString());\n			uiIndex++;\n			return $enclose;\n			break;\n		case \"Button\" :\n			var uiId = type + uiIndex.toString();\n			$tmp.append(enclose(\"<button id=\" + uiId + \"></button>\", parentType));\n			var $ui = $(\"#\" + uiId);\n			var $enclose = $(\"#enclose\" + uiIndex.toString());\n			$(\"#\" + uiId).button().html(model.desc).click(function() \n			{\n				rootUi.signal(\"onClick\", [new Store(model.desc)], path);\n			});\n			uiIndex++;\n			return $enclose;\n			break;\n		case \"HGroup\" :\n		case \"VGroup\" :\n			if(view == null)\n			{				\n				var uiId = type + uiIndex.toString();\n				// $tmp.append(enclose(\"<div id=\" + uiId + \"></div>\", parentType));\n				var uiClass = type == \"HGroup\" ? \"hGroup\" : \"vGroup\";\n				$tmp.append((parentType == \"HGroup\") ? \n					\"<div class=\\\"hGroupElem \" + uiClass + \"\\\" id=\" + uiId + \"></div>\" :\n					\"<div class=\\\"vGroupElem \" + uiClass + \"\\\" id=\" + uiId + \"></div>\"\n				);\n				var $ui = $(\"#\" + uiId);\n				uiIndex++;\n				_.each(model.children, function(child, index)\n				{\n					$ui.append(buildUi(child, type, path.concat([\"children\", index]), rootUi));\n				});\n			} else\n			{\n				$ui = view;\n				var childrenTicks = ticks.subs.children;\n				\n			}\n			return $ui;\n			break;\n	}\n}\n\nvar mainUiIndex = 0;\nlocalNodes =\n{\n	\"UiView\" : \n	{\n		\"fields\" : [[\"ui\", \"Ui\"]],\n		\"builder\" : function(fields) \n		{	\n			var ui = fields.ui;\n			this.index = mainUiIndex;\n			var $ui = $(\"#ui\" + mainUiIndex);\n			mainUiIndex++;	\n\n			ui.addSink(this);			\n			\n			var $root = null;\n\n			this.dirty = function()\n			{\n				$ui.empty();\n				var uiVal = ui.get();\n				buildUi($root, uiVal, \"\", [], ui, ui.ticks, ui.ticks.tick)\n				$ui.append();\n			}\n\n			this.dirty();\n		}\n	},\n	RootView :\n	{\n		\"fields\" : [[\"child\", \"UiView\"]],\n		\"builder\" : function(fields) \n		{	\n			var childNode = fields.child;\n\n			childNode.addSink(this);\n			var $ui = $(\"#ui\" + mainUiIndex);\n			mainUiIndex++;\n\n			this.get = function()\n			{\n				return null;\n			}\n\n			this.sinks = [];\n			this.dirty = function()\n			{\n				$ui.empty();\n				var child = childNode.get();\n				$ui.append(child);	\n\n				_.each(this.sinks, function(sink)\n				{\n					sink.dirty()\n				});			\n			}\n\n			this.dirty();\n\n			this.getType = function()\n			{\n				return \"RootView\";\n			}\n\n			this.addSink = function(sink)\n			{\n				this.sinks.push(sink);\n			}\n		}\n	},\n	\"TextInputView\" : \n	{\n		superClass : \"UiView\",\n		\"fields\" : [[\"ui\", \"TextInput\"], [\"parentType\", \"string\"], [\"path\", mListType(\"string\")], [\"rootUi\", \"Ui\"]],\n		\"builder\" : function(fields) \n		{	\n			var uiNode = fields.ui;\n			var parentType = fields.parentType.get();\n			var path = fields.path.get();\n			var rootUi = fields.rootUi;\n\n			uiNode.addSink(this);\n			\n			// if(!(\"__focusSlotPushed\" in model.__signals))\n			// {\n			// 	model.__signals.__focusSlotPushed = true;\n			// 	model.__signals.focus.push({\n			// 		signal : function()\n			// 		{\n			// 			// $(\"#\" + uiId).focus();\n			// 		}\n			// 	});\n			// }\n			\n			this.sinks = [];\n	\n			this.dirty = function()\n			{\n				_.each(this.sinks, function(sink)\n				{\n					sink.dirty()\n				});\n			}\n\n			this.dirty();\n\n			this.get = function()\n			{\n				var ui = fields.ui.get();\n				var uiId = \"TextInput\" + uiIndex.toString();\n				var buttonIndex = uiIndex;\n				$tmp.append(enclose(\"<input size=\\\"8\\\" type = \\\"text\\\" id=\" + uiId + \" value = \\\"\" + ui.desc + \"\\\"></input>\", parentType));\n				var $ui = $(\"#\" + uiId);\n				var $enclose = $(\"#enclose\" + uiIndex.toString());\n				$ui.change(function(event) \n				{\n					// rootUi.set(\"toto\");\n					uiNode.signal(\"onChange\",  [new Store($(this).val())], []);\n					// code.p.dirty([]);\n				});\n				uiIndex++;\n				this.enclose = $enclose;\n				return this.enclose;\n			}\n			this.getType = function()\n			{\n				return \"TextInputView\";\n			}\n\n			this.addSink = function(sink)\n			{\n				this.sinks.push(sink);\n			}\n		}\n	},\n	\"VGroupView\" : \n	{\n		superClass : \"UiView\",\n		\"fields\" : [[\"ui\", \"VGroup\"], [\"parentType\", \"string\"], [\"path\", mListType(\"string\")], [\"rootUi\", \"Ui\"], [\"children\", mListType(\"UiView\")]],\n		\"builder\" : function(fields) \n		{	\n			var uiNode = fields.ui;\n			var parentType = fields.parentType.get();\n			var path = fields.path.get();\n			var rootUi = fields.rootUi;\n			var childrenNode = fields.children;\n\n			uiNode.addSink(this);\n			childrenNode.addSink(this);\n\n			this.sinks = [];\n			this.dirty = function()\n			{\n				_.each(this.sinks, function(sink)\n				{\n					sink.dirty()\n				});\n			}\n\n			this.get = function()\n			{\n				var children = childrenNode.get();\n				var uiId = \"VGroupView\" + uiIndex.toString();\n				// $tmp.append(enclose(\"<div id=\" + uiId + \"></div>\", parentType));\n				var uiClass = \"vGroup\";\n				$tmp.append((parentType == \"HGroup\") ? \n					\"<div class=\\\"hGroupElem \" + uiClass + \"\\\" id=\" + uiId + \"></div>\" :\n					\"<div class=\\\"vGroupElem \" + uiClass + \"\\\" id=\" + uiId + \"></div>\"\n				);\n				var $ui = $(\"#\" + uiId);\n				$ui.empty();\n				uiIndex++;\n				_.each(children, function(child, index)\n				{\n					$ui.append(child);\n				});\n				this.enclose = $ui;\n				return this.enclose;\n			}\n\n			this.getType = function()\n			{\n				return \"VGroupView\";\n			}\n\n			this.addSink = function(sink)\n			{\n				this.sinks.push(sink);\n			}\n		}\n	}\n}\n\n_.merge(nodes, localNodes);\n\nvar library =\n{\n	nodes : nodes,\n	functions : functions,\n	actions : actions\n};\n\n\n\n$.get(\"editor.nodes\", function( text ) {\n// $.get( \"structSlots.nodes\", function( text ) {\n	setLodash(_);\n	setEngineLodash(_);\n\n	var codeGraph = codeToGraph(text, library, parser);\n	code = compileGraph(codeGraph, library);\n\n	function build(type, params)\n	{\n		var fieldsDecl = library.nodes[type].fields;\n		var fields = _.zipObject(_.map(fieldsDecl, function(fieldDecl, i)\n		{\n			return [fieldDecl[0], params[i]];\n		}));\n		return new library.nodes[type].builder\n		(\n			_.mapValues(fields, function(fieldVal)\n			{\n				return new Store(fieldVal);\n			})\n		).get();\n	}\n\n	function buildExpr(expr)\n	{\n		if(_.isArray(expr))\n		{\n			return	build(\"Ref\", [_.map(expr, function(elem)\n			{\n				return elem;\n			})]);\n		}\n		else\n		{\n			return	build(\"Func\", \n				[\n					expr.type, \n					_.map(expr.params, function(param)\n					{\n						return buildExpr(param);\n					})\n				])\n		}\n	}\n\n	//var txt = JSON.stringify(codeGraph, undefined, 4);\n	var prog = code.program;\n	$.get(\"test2.json\", function(graph)\n	{\n		// TODO enable\n		// return;\n		_.each(graph.structsAndFuncs, function(structOrfunc)\n		{\n			if(\"struct\" in structOrfunc)\n			{\n				var struct = structOrfunc.struct;	\n			} else if(\"func\" in structOrfunc)\n			{\n				var func = structOrfunc.func;\n				// prog.get().functions.push(new library.nodes.Function.builder(\n				// {\n				// 	id : new Store(func.id)\n				// }).get());\n				prog.get().functions.push(build(\"FuncDef\",\n				[\n					func.id,\n					_.map(func.in, function(paramDecl)\n						{\n							var p = build(\"ParamDecl\", [paramDecl[0], paramDecl[1]]);\n							return p;\n						}),\n					buildExpr(func.out.val)\n				]));\n				globalTick++;\n				prog.dirty([]);\n			}\n		});\n	}, \"json\");\n	// var $ui = $(\"#ui\");	\n	// var ui = code.ui.get();\n\n	// buildUi(ui, $ui, \"\", [], code.ui);\n	// $ui.empty();\n	// buildUi(ui, $ui, \"\", [], code.ui);\n\n	var tick   = Bacon.interval(20);\n	//code.tick.signal();\n	tick.onValue(function(t)\n	{\n		// code.tick.signal();\n	});\n}\n, \"text\" // Commenter pour lire du json\n);\n\n})",
			"file": "examples/04-Editor/editor.js",
			"file_size": 9098,
			"file_write_time": 130405282732848626,
			"settings":
			{
				"buffer_size": 8919,
				"line_ending": "Windows"
			}
		},
		{
			"file": "examples/04-Editor/editor.css",
			"settings":
			{
				"buffer_size": 1019,
				"line_ending": "Windows"
			}
		},
		{
			"file": "examples/04-Editor/editor.html",
			"settings":
			{
				"buffer_size": 1132,
				"line_ending": "Windows"
			}
		},
		{
			"file": "examples/02-ArcaNodes/arcaNodes.js",
			"settings":
			{
				"buffer_size": 8056,
				"line_ending": "Windows"
			}
		},
		{
			"file": "examples/04-Editor/editor.nodes",
			"settings":
			{
				"buffer_size": 4255,
				"line_ending": "Windows"
			}
		},
		{
			"file": "examples/04-Editor/test2.json",
			"settings":
			{
				"buffer_size": 9999,
				"line_ending": "Windows"
			}
		},
		{
			"file": "examples/02-ArcaNodes/arcaNodes.nodes",
			"settings":
			{
				"buffer_size": 7700,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/E/Python/Nodes/Qml/Expression.qml",
			"settings":
			{
				"buffer_size": 5639,
				"line_ending": "Windows"
			}
		},
		{
			"file": "examples/03-Tree/treeEdit.nodes",
			"settings":
			{
				"buffer_size": 3824,
				"line_ending": "Windows"
			}
		},
		{
			"file": "src/jsEngine/Parser.txt",
			"settings":
			{
				"buffer_size": 22656,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/E/GitHub/libs/Parser.js",
			"settings":
			{
				"buffer_size": 364555,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 464.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/E/GitHub/Nodes/examples/04-Editor/test.json",
		"/E/GitHub/Nodes/examples/04-Editor/editor.css",
		"/E/GitHub/Nodes/examples/04-Editor/Chrome.bat",
		"/E/GitHub/Nodes/examples/04-Editor/testType.nodes",
		"/E/GitHub/Nodes/examples/04-Editor/test2.json",
		"/E/GitHub/Nodes/examples/04-Editor/testSignal.nodes",
		"/E/GitHub/Nodes/examples/04-Editor/signalInFunc.nodes",
		"/E/GitHub/Nodes/examples/02-ArcaNodes/arcaNodes.nodes",
		"/E/GitHub/Nodes/examples/03-Tree/treeEdit.nodes",
		"/E/GitHub/Nodes/examples/04-Editor/editor.html",
		"/E/GitHub/Nodes/examples/01-Snake/Chrome.bat",
		"/E/GitHub/Nodes/examples/02-ArcaNodes/Chrome.bat",
		"/E/GitHub/Nodes/examples/03-Tree/ChromeTreeEdit.bat",
		"/E/GitHub/Nodes/examples/03-Tree/Chrome.bat",
		"/E/GitHub/libs/jquery-ui-1.10.3/demos/autocomplete/folding.html",
		"/E/GitHub/Nodes/examples/04-Editor/signalin",
		"/C/Documents and Settings/Vinz/Application Data/Sublime Text 3/Packages/User/Preferences.sublime-settings",
		"/C/Documents and Settings/Vinz/Application Data/Sublime Text 3/Packages/User/bh_core.sublime-settings",
		"/C/Documents and Settings/Vinz/Application Data/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
		"/E/GitHub/libs/Bacon-0.7.2.min.js",
		"/E/GitHub/Nodes/src/jsEngine/Library.js",
		"/E/GitHub/libs/jquery-ui-1.10.3/ui.accordion.jquery.json",
		"/E/GitHub/libs/paperjs-v0.9.15/examples/Paperjs.org/NyanRainbow.html",
		"/E/GitHub/Nodes/src/jsEngine/Engine.js",
		"/E/GitHub/libs/paperjs-v0.9.15/examples/Node.js/SVGExport.js",
		"/E/GitHub/Nodes/examples/02-ArcaNodes/deltaSyntax.nodes",
		"/E/GitHub/libs/jquery-ui-1.10.3/demos/accordion/fillspace.html",
		"/E/GitHub/libs/jquery-ui-1.10.3/ui/minified/i18n/jquery.ui.datepicker-zh-CN.min.js",
		"/E/GitHub/libs/paperjs-v0.9.15/examples/Paperjs.org/FutureSplash.html",
		"/E/GitHub/libs/paperjs-v0.9.15/examples/JSON/Compound Path.html",
		"/E/GitHub/libs/paperjs-v0.9.15/examples/Scripts/CompoundPath.html",
		"/E/GitHub/libs/paperjs-v0.9.15/docs/classes/CompoundPath.html",
		"/E/GitHub/libs/paperjs-v0.9.15/examples/SVG Export/Empty Path Testing.html",
		"/E/GitHub/libs/paperjs-v0.9.15/examples/JSON/Empty Path Testing.html",
		"/E/GitHub/libs/jquery-ui-1.10.3/ui/minified/i18n/jquery.ui.datepicker-pt-BR.min.js",
		"/E/GitHub/libs/jquery-ui-1.10.3/ui/minified/i18n/jquery.ui.datepicker-pt.min.js",
		"/E/GitHub/libs/jquery-ui-1.10.3/ui/minified/i18n/jquery.ui.datepicker-pl.min.js",
		"/E/GitHub/libs/jquery-ui-1.10.3/demos/tabs/manipulation.html",
		"/E/GitHub/libs/paperjs-v0.9.15/examples/SVG Import/Multiple Paths Test 2.html",
		"/E/GitHub/libs/paperjs-v0.9.15/examples/SVG Import/Multiple Paths Test 1.html",
		"/E/GitHub/libs/jquery-ui-1.10.3/MANIFEST",
		"/E/FavoriteVideo/readme.txt",
		"/E/GitHub/Nodes/examples/03-Tree/treeEdit.js",
		"/E/Python/Nodes/HtmlNodes/06-Inheritance/test.js",
		"/E/GitHub/Nodes/examples/04-Editor/editor.nodes",
		"/E/GitHub/Nodes/examples/04-Editor/editor.js",
		"/E/GitHub/Nodes/log.txt",
		"/E/GitHub/Nodes/examples/01-Snake/snake.txt",
		"/E/GitHub/Nodes/examples/03-Tree/monads.nodes",
		"/H/autorun.inf",
		"/E/WebSite/index.html",
		"/E/WebSite/style.css",
		"/I/autorun.inf",
		"/E/GitHub/Nodes/examples/03-Tree/tree.js",
		"/E/GitHub/Nodes/examples/03-Tree/tree.nodes",
		"/E/GitHub/Nodes/examples/02-ArcaNodes/arcaNodes.js",
		"/E/GitHub/Nodes/examples/01-Snake/snakeNode.js",
		"/E/GitHub/Nodes/src/jsEngine/Parser.txt",
		"/E/GitHub/libs/Parser.js",
		"/C/Documents and Settings/Vinz/Application Data/Sublime Text 3/Packages/User/JavaScript.sublime-settings",
		"/E/GitHub/Nodes/examples/03-Tree/testSyntax.nodes",
		"/E/GitHub/Nodes/examples/03-Tree/tree.html",
		"/E/GitHub/Nodes/examples/03-Tree/tree.css",
		"/E/GitHub/Nodes/examples/03-Tree/treeEdit.html"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"this.sinks",
			"addSink",
			"rootUi",
			"var $enclose = $(\"#enclose\" + uiIndex);",
			"class",
			"Class",
			"class",
			"Class",
			"class",
			"buttonIndex",
			"parentView.append",
			"break;",
			"parentType",
			"rootUi",
			"mValTick",
			"this.tick",
			"MatchTy",
			"matchType",
			"needsNodes",
			"hasRef",
			"hasConnections",
			"connectionSet",
			"hasConnections",
			"funcRef",
			"hasConnections",
			"FunctionInstance",
			"join",
			"clone",
			"__signals",
			"StructSignal",
			"__signa",
			"split",
			"join",
			"split",
			"connect",
			"signalsList",
			"funcRef",
			"beforeConnectionsLength",
			"comprehensionIndices",
			"tuple",
			"destructInputs",
			"destructTypes",
			"inputTemplateType",
			"StructAccess",
			"tuple",
			"arrays",
			"getMinMaxTick",
			"IfElse",
			"mValTick",
			"ret",
			"mValTick(val, newSubTicks);",
			"update",
			"mValTick",
			"hasRef",
			"ticks.tick",
			"if(ticks.ticks < this.tick)",
			"pushPath",
			"NodeAccess",
			"this.list.signal(\"foreach\", [this.iteratedSignal].concat(this.params), rootAndPath);",
			"this.signal = function(signal, params, path,",
			"yt",
			"var val = this.get();\n\n		var operator = this.operatorStack.pop();\n		this.savedStack.push(operator);",
			"NodeAccess",
			"selfStor",
			"nodeClass.operators.signal(struct, sig, val, path);",
			"operators.signal(this.get(), signal, params, path, rootAndPath);",
			"getTemplate",
			"arrays",
			"ArrayAccess",
			"needsNode",
			"needsNodes",
			"array",
			"pathStore",
			"substoFunc",
			"substo",
			"flatMap",
			"paramStores",
			"this.nodes",
			"listN?",
			"itRef",
			"ListNodeElementRef",
			"listN",
			"listStore",
			"itRef",
			"ListNodeElementRef",
			"struct",
			"contains",
			"conatin",
			"cloneAndLink",
			"callCounter",
			"this.index",
			"this.index = null;\n	var nodeType",
			"this.getPath = function()\n	{\n		return this.node.getPath().concat(this.index);",
			"ArrayAccess",
			"arrayAc",
			"getPath",
			"this.getPath = function()",
			"getPath",
			"this.push = function(node)",
			"(subTicks == undefined)",
			"// inputs[arrayIndex].push(new ArrayAccess(this.arrays[arrayIndex], i));",
			"getMinMaxTick",
			"funcNode",
			"FunctionNode",
			"this.update",
			"update",
			"maxTick",
			"this.getMinMaxTick = function(path)",
			"if(path",
			"getMinMaxTick",
			"map(this.arrays, function(array){",
			"cartesianProductOf",
			"ticks[i] = pair[1];",
			"this.tick",
			"this.update = function(val, tick)",
			"__mact",
			"mValTick",
			"__minT",
			"this.outputList",
			"_.map(this.arrays, function(array){return array.update(null, tick)});",
			"return this.refStack[this.lastIndex].update(val, tick);",
			"return this.updateOperator(val, this.path);",
			"__minTick",
			"getPath",
			"))",
			"funcRef",
			"getPath",
			"inputs[arrayIndex].pushVal(tuple[arrayIndex]);"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"getTypeParams",
			"guessTypeParams",
			"getTypeParams",
			"guessTypeParams",
			"this.guessTypeParams",
			"typeParamsToParamsPaths",
			"mListType",
			"mList",
			"mt",
			"tree",
			"getCommonSuperClass"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 3,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/jsEngine/Engine.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 96573,
						"regions":
						{
						},
						"selection":
						[
							[
								5214,
								5236
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3870.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/jsEngine/Library.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 44272,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										31274,
										31280
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								1979,
								1989
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close"
							],
							"history_list_is_closing": true,
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 1498.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/jsEngine/Graph.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9889,
						"regions":
						{
						},
						"selection":
						[
							[
								814,
								814
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 258.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "examples/04-Editor/editor.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8919,
						"regions":
						{
							"bookmarks":
							{
								"flags": 144,
								"icon": "bookmark",
								"regions":
								[
									[
										1538,
										1538
									],
									[
										1828,
										1828
									],
									[
										4298,
										4304
									]
								],
								"scope": "bookmarks"
							}
						},
						"selection":
						[
							[
								2853,
								2853
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 800.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "examples/04-Editor/editor.css",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1019,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close"
							],
							"syntax": "Packages/CSS/CSS.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 135.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "examples/04-Editor/editor.html",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1132,
						"regions":
						{
						},
						"selection":
						[
							[
								820,
								817
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close"
							],
							"syntax": "Packages/HTML/HTML.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "examples/02-ArcaNodes/arcaNodes.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8056,
						"regions":
						{
						},
						"selection":
						[
							[
								1258,
								1258
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 463.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 7,
					"file": "examples/04-Editor/editor.nodes",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4255,
						"regions":
						{
						},
						"selection":
						[
							[
								4255,
								4255
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2595.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "examples/04-Editor/test2.json",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9999,
						"regions":
						{
						},
						"selection":
						[
							[
								9999,
								9999
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close"
							],
							"syntax": "Packages/JavaScript/JSON.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1890.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "examples/02-ArcaNodes/arcaNodes.nodes",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7700,
						"regions":
						{
						},
						"selection":
						[
							[
								4280,
								4280
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1228.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/E/Python/Nodes/Qml/Expression.qml",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5639,
						"regions":
						{
						},
						"selection":
						[
							[
								3510,
								3518
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 615.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "examples/03-Tree/treeEdit.nodes",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3824,
						"regions":
						{
						},
						"selection":
						[
							[
								3244,
								3244
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close"
							],
							"syntax": "Packages/Python/Python.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1843.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/jsEngine/Parser.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 22656,
						"regions":
						{
						},
						"selection":
						[
							[
								22656,
								22656
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close"
							],
							"syntax": "Packages/C++/C.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 17400.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "/E/GitHub/libs/Parser.js",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 364555,
						"regions":
						{
						},
						"selection":
						[
							[
								4,
								4
							]
						],
						"settings":
						{
							"BracketHighlighterBusy": false,
							"bh_regions":
							[
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close"
							],
							"syntax": "Packages/JavaScript/JavaScript.tmLanguage",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.5,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "Nodes.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"l",
				"jsEngine\\Library.js"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 35.0,
		"selected_items":
		[
			[
				"flat",
				"flatMap"
			]
		],
		"width": 392.0
	},
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": false,
	"side_bar_width": 150.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
