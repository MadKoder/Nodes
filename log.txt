5/2 :
	Fonction utilisateur transpose : fait une recursion, pour cela mise en place de fonctions pures :
		node "classique" ne peux pas etre recursif car doit s'instancier.
		Les fonctions sont caches en fonctions de leur type, il n'y a donc qu'une instance par type complet (base + template)
		! Pour gerer la recursion, mise en place d'une pile de parametres : push/pop avant/apres l'appel de l'expression finale.
		Peuvent etre utilisees par map et autres fonctions d'ordre superieur.
	Encapsulation des fonctions dans des nodes
		
6/2 :
	Type de transpose = type du if = type du 2eme parametre = list<undefined>
		Si on prend le troisieme parametre, c'est bon
		Le probleme se posera dans l'autre sens dans d'autres cas
		TODO : 
			Test de coherence des type du 2 et 3 parametre d'un if
				Si non equivalent, prendre le plus precis (ex: list<list<T>> > list<undefined>)
			Typer explicitement transpose et toutes les autre fonctions utilisateur
	Type de node fonction = obj.expr.getType() si il y a un expr (fonction utilisateur), sinon obj.type
		TODO : harmoniser
		? obj.type assigne dans les fonctions utilisateur n'a pas l'air de fonctionner

7/2 :
	Simplification du parsing, mise en commun du code pour tous les types (nodes, functions ...)
	Implementation du getTemplates (guessTemplates) des User Functions, deduction des templates a partir des params.
	Remise a plat des fonctions, avec typage propre... 

8/2 : Fin de la remise a plat des fonctions, c'etait tres lourd : Specification propre des fonctions, avec ou sans template, enrobage propre dans des nodes, prise en compte des fonctions utilisateurs.
	Ajout de map et contains : fonctions d'ordre superieur, requierent definition du type "fonction"
	Gerent maintenant fonctions normales et generiques (templates)
	Ensuite, on pourra ajouter des fonctions dans des structures, et les utiliser facilement comme parametres
	
10/2 : Creation du site web (youpi !) : http://madkoder.esy.es. Besoin pour image avec Raphael.js, car le cache ne fonctionne pas en local : gros memory leak au fur et a mesure des animations.
	Pour le moment, hebergement gratuit sur hostinger.
	Ajout de slot dans les structs : deviennent plus des nodes.
	Recherche de syntaxe pour les appeler, surtout dans les listes.
	
11/2 : Slot de struct ajoutes
	Syntaxe foreach : appel d'un slot de tous les elements d'une liste
	TODO : gestion des mutations du aux appels de slots : events en cas de modif.
	Insertion dans GitHub
	
12/2 : Reflexion de fond sur mecanisme de maj par deltas
	Debut implementation du site
	
13/2 : site online. ArcaNodes tres lent sur firefox, OK sur chrome.
	Maquette nouveau modele observer/deltas
	
14/2 : Recherche sur les deltas, nouvelles syntaxes d'update

15/2 : Implementation de la syntaxe "upadate ... with ...", et de la syntaxe "on" .. "in" (application d'actions sur une liste)
	Ajout d'un ensemble source/sinks/dirty.
	
16/2 : Renommage de Store.signal en Store.set (ainsi que pour les autres types de Store)
	Syntaxe des parametres d'action == parametres de fonctions.
	Plus de sinks dans tous les nodes, seulement dans les stores, et remontee de tous les addSink vers les store, comme cela seul les nodes ayant reellement besoin d'etre notifies le seront (comme les Events/Reactions)
	Ajout du type de node cache

17-18/2 : Ajout de la demo Tree.
	Syntaxes de composite, de select, de select apply
	
19/2 : Reflexions sur les syntaxes (trop) specifiques select ... On peut utiliser flatMap au lieu de select.
	Ajout de flatMap
	Ajout des closures
	
20/2 : Les closures fonctionnent ! Meme en parametre d'un map ! La mise au point a ete tres compliquee
	Ajout de l'action match type
	
21/2 : RQ importante : contrairement aux mutateurs (les slots de classes), las actions avec reference ne sont pas coherentes : elles ne cadrent pas avec le systeme d'envoi de messages. Et les references, c'est pas bien.
	-> actions avec references transformes en slot de classe ajoute a l'exterieur : un slot de classe ne peut modifier que le self, aucune action ne peut prendre un parametre en ref.
	
24/2 : Ajout des signals de struct.
	Les slots font partie des valeurs -> stockes avec
	Question : doit-on faire des signals par node ou par valeur ?
	Par valeur, ils peuvent faire partie d'une hierarchie (par ex. d'ui)

25/2 : Harmonisation de la syntaxe des champs de structs : format "type id", comme pour les fonctions.
	Pb : ne supporte pas plusieurs id avec un type (int a,b,...) a cause de l'indetermination sur les membres suivant dans le parser. On est donc limite a une declaration par champs.
	De plus en plus de fonctions font appel au type d'une valeur pour determiner les champs, operateurs, inputs qui vont bien Ã  l'interieur d'une hierarchie, car dans le cas typique d'un store, seul le type de base est stocke.
	-> Le type d'une valeur doit a terme etre remmplace par un pointeur vers un objet complet (= tmv)